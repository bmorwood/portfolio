<!DOCTYPE html>
<html>
<head>
	<title>DR.XO</title>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
	<meta name="language" content="en" />
	<meta name="description" content="" />
	<meta name="keywords" content="" />

    <style type="text/css">
        body
        {
            margin:0;
            padding:0;
        }
    </style>

</head>
<body>
	
<canvas id="canvas-main"> </canvas>
<script language="javascript" src="js/jquery-1.6.2.min.js" type="text/javascript"></script>
<script language="javascript" src="js/jstween/Tween.js" type="text/javascript"></script>
<script language="javascript" src="js/flashcanvAS.js" type="text/javascript"></script>
<script language="javascript" type="text/javascript">

    /* Author Barry Morwood */
	
	/* ENUM */
	
	var	BlockType = {};
	BlockType.VIRUS = "VIRUS";
	BlockType.PILL_MASTER = "PILL_MASTER";
	BlockType.PILL_CHILD = "PILL_CHILD";
	BlockType.PILL_SINGLE = "PILL_SINGLE";
	
	var	PillRotation = {};
	PillRotation.TOP = "TOP";
	PillRotation.BOTTOM = "BOTTOM";
	PillRotation.LEFT = "LEFT";
	PillRotation.RIGHT = "RIGHT";

    var canvas = $('#canvas-main')[0];
    var context = canvas.getContext('2d');

    canvas.style.background = "#717070";
    canvas.width = 500;
    canvas.height = 700;
	canvas.contentEditable = true;
	
	$('#canvas-main').attr("tabindex", "0");
	$('#canvas-main').keydown(keyActions);
	
	context.mozImageSmoothingEnabled = true;

    var renderCount = 0;

	/* game variables */
	
	var grid = [];
    var gridData = new Sprite(context, null);
    gridData.width = 300;
    gridData.height = 500;
    gridData.x = 100;
    gridData.y = 150;

    var intro_screen = true;

    var pill;
	
	var gridSize = 25;
	var offset = gridSize/2;
    var level = 1;
    var levelMultiplier = 3;
    var virusCount = levelMultiplier * level;
    var nextPill;
    var virusTF;
    var levelTF;
    var nextTF;
	var pauseScreen;
	var assets = [{image:"cross_white", id:1}, {image:"cross_black", id:2}, {image:"square_white", id:3}, {image:"square_black", id:4}];
    var paused = false;
    var pauseScreenTweener;
    var startScreen;
    var startScreenMode = true;
    var startScreenTweener;
	var wonLevel = false;
	
	/* end game variables */

    var timer = setInterval(flashcanvAS_loop, 1000 / 60);

    //init();
	
	
	preInit();
	
	function preInit(){

		level = 1;
		instances = [];
		intro_screen = true;
        startScreenMode = true;
		startScreenIntro();
	}

    function startScreenIntro(){
	
	        //start screen
        startScreen = new Sprite(context, "images/start_screen.png");
		startScreen.x = (canvas.width/2) - (startScreen.width/2);
		startScreen.y = (canvas.height/2) - (startScreen.height/2);
		startScreen.alpha = 1;

        startScreenTweener = new Tween(startScreen, 'rotation', Tween.backEaseInOut, 0,8, 0.5);
        startScreenTweener.onMotionFinished = function(){this.yoyo()};
        startScreenTweener.start();

        addChild(startScreen);
		
		
        for(var i = 0; i < 20; i++){
            var asset = assets[Math.floor(Math.random() * 4)];
			var item = new Sprite(context, "images/"+asset.image+".png");
	        item.x = Math.random() * canvas.width;
	        item.y = Math.random() * canvas.height
	        item.speed = (Math.random() * 0.5) + 1;
            item.name = "intro";
            addChild(item);
        }
    }

    

    function gameover(){
        gameoverScreen.alpha = 1;
        addChild(gameoverScreen);
		gameOver = true;
    }

    function levelComplete(){
        trace('levelComplete');
        winScreen.alpha = 1;
        addChild(winScreen);
		gameOver = true;
    }

    function restart(){
        // reset all the level params

        //clear data
        startLevel();

    }

    function startLevel(){

        intro_screen = false;
		wonLevel = false;
        startScreenTweener.stop();
        
        instances = [];

        addChild(levelTF);
        addChild(virusTF);
        addChild(nextTF);
		addChild(hudTF)

        buildGrid();

    	if(createEnemys()){
            startGame();
        }

        resume();
    }

    function next(){
        level += 1;
        startLevel();
    }

    function buildGrid(){
        //build grid
        for (var x = 0; x < 12; x++) {
			grid[x] = [];
            for (var y = 0; y < 20; y++) {
                grid[x][y] = {target:null};
				
				var item = new Sprite(context, "images/cross_white.png");
				gridData.addChild(item);
				
				item.x = (x * gridSize) + offset;
				item.y = (y * gridSize) + offset;
				item.width = gridSize;
				item.height = gridSize;
				item.alpha = 0.10;
                item.render();

				
            }
        }
    }


    function init() {

        virusTF = new TextField(context);
        virusTF.text = "Virus(s) left {#}";
        virusTF.size = 14;
        virusTF.x = 90;
        virusTF.y = 45;
        virusTF.font = "verdana";
        

        //level text field
        levelTF = new TextField(context);
        levelTF.text = "Level {#}";
        levelTF.size = 14;
        levelTF.x = 6;
        levelTF.y = 125;
        levelTF.font = "verdana";


        //next pill text field
        nextTF = new TextField(context);
        nextTF.text = "Next";
        nextTF.size = 14;
        nextTF.x = 6;
        nextTF.y = 88;
        nextTF.font = "verdana";
		
		//heads up display  text field
        hudTF = new TextField(context);
        hudTF.text = "'P' to pause";
        hudTF.size = 14;
        hudTF.x = 204;
        hudTF.y = 125;
        hudTF.font = "verdana";
        

        //paused screen
        pauseScreen = new Sprite(context, "images/pause_screen.png");
		pauseScreen.x = (canvas.width/2) - (pauseScreen.width/2);
		pauseScreen.y = (canvas.height/2) - (pauseScreen.height/2);
		pauseScreen.alpha = 1;

        pauseScreenTweener = new Tween(pauseScreen, 'rotation', Tween.backEaseInOut, 0,8, 0.5);
        pauseScreenTweener.onMotionFinished = function(){this.yoyo()};
        pauseScreenTweener.start();

        //game over screen 
        gameoverScreen = new Sprite(context, "images/gameover_screen.png");
		gameoverScreen.x = (canvas.width/2) - (gameoverScreen.width/2);
		gameoverScreen.y = (canvas.height/2) - (gameoverScreen.height/2);
		gameoverScreen.alpha = 0;

       

        //win screen 
        winScreen = new Sprite(context, "images/winner_screen.png");
		winScreen.x = (canvas.width/2) - (winScreen.width/2);
		winScreen.y = (canvas.height/2) - (winScreen.height/2);
		winScreen.alpha = 0;

        $('#canvas-main').click(function (event){
             trace(getGridObject(event.clientX - gridData.x, event.clientY - gridData.y));
         });

		

    }
	
	function keyActions(event){
	        // trace(event.keyCode);
			 //trace(event.charCode);
            if (event.keyCode == 39) {
                moveRight();
                event.preventDefault();
            }

            if (event.keyCode == 37) {
                moveLeft();
                event.preventDefault();
            }

            if (event.keyCode == 40) {
                moveDown(pill);
                event.preventDefault();
            }

            if (event.keyCode == 38) {
                rotate();
                event.preventDefault();
            }

            //pause 'P'
            if (event.charCode == 112 || event.keyCode == 80) {

                if(!paused)
                    pause();
                else
                    resume();
            }

            //restart 'R'
			
            if (event.charCode == 114 || event.keyCode == 82) {
                restart();
            }
			

            //next 'N'
			 
            if (event.charCode == 110 || event.keyCode == 78) {
                next();
            }
			
			
			//next 'enter'
			if (event.charCode == 0 || event.keyCode == 13) {
				if(startScreenMode){
					init();
					startScreenMode = false;
					startLevel();
				}else if(wonLevel){
					next();
				}else if(gameOver){
					restart();
				}
            }

            //next 'S'
			
            if (event.charCode == 115 || event.keyCode == 83) {
                preInit();
            }
			

            if (event.keyCode == 27) {
                init();
            }
	}


    function resume() {
        pauseScreenTweener.stop();
        paused = false;

        removeChild(pauseScreen);
    }

    function pause() {
        pauseScreenTweener.start();
        paused = true;

        addChild(pauseScreen);
        //show pause screen
        
    }

    function startGame(){
        trace("start level");
        pill = createPill();
        nextPill  = createPill();
        gameOver = false;

        showNextPill();
        usePill();
    }

    function usePill(){

        pill.x = 125 + offset;
        pill.y = -offset;

        pill.partner.x = pill.x + gridSize;
        pill.partner.y = pill.y;
    }

    function showNextPill(){
        nextPill.x = -75;
        nextPill.y = 45;

        nextPill.partner.x = nextPill.x + gridSize;
        nextPill.partner.y = nextPill.y;

    }

    function createPill() {
		
		var asset = assets[Math.floor(Math.random() * 4)];
	
        var master = new Sprite(context, "images/"+asset.image+".png");
        master.x = 125 + offset;
        master.y = -offset;
        master.width = gridSize;
        master.height = gridSize;
		master.alpha = 1;
		master.pill_rotation = PillRotation.RIGHT;
		master.assetID = asset.id;
		master.type = BlockType.PILL_MASTER;
		
        gridData.addChild(master);
		
		asset = assets[Math.floor(Math.random() * 4)];

        var child = new Sprite(context, "images/"+asset.image+".png");
        child.x = master.x + gridSize;
        child.y = -offset;
        child.width = gridSize;
        child.height = gridSize;
		child.alpha = 1;
		child.assetID = asset.id;
		child.type = BlockType.PILL_CHILD;

        gridData.addChild(child);

        master.partner = child;
        child.partner = master;

        return master;

    }

	var locTick = 0;
	var locX = 0;
	var gameOver = false;

    function flashcanvAS_loop(){

    // render logic
        context.clearRect(0, 0, canvas.width, canvas.height);
		
		if(instances != null){
			for (var key in instances) {
			
				if (instances[key] == null )
					continue;

                try{
				    instances[key].render();
                    }catch(e){
                        debugger;
                    }
			}
		}

        if(!paused && !startScreenMode && !gameOver){
            enterFrame();
            }

        if(intro_screen){

        	for (var key in instances) {
			
				if (instances[key] == null)
					continue;

                if(instances[key].name == "intro"){

                    var introSprite = instances[key];

				    introSprite.y -= introSprite.speed;
		            introSprite.rotation -= 2;
                        
		
		            if(introSprite.y < -(introSprite.height/2)){
                        introSprite.y = canvas.height + introSprite.height/2;
		            }
                }
			}

            addChild(startScreen);
        }

    }

    function enterFrame() {

        // pill logic
        renderCount++;

        levelTF.text = "Level " + level;

         if (renderCount % 5 == 0 && !gameOver) { // remove gameover var
            for (var x = 0; x < 12; x++) {
				for (var y = 19; y >= 0; y--) {
					square = getGridObject((x+1)*25, (y+1)*25);
					
					if(square.target != null){
						if (square.target.type == BlockType.PILL_SINGLE && canMove({x:square.target.x, y:square.target.y + gridSize})) {
							moveDown(square.target);
							getGridObject(square.target.x, square.target.y).target = square.target;
							square.target = null;
						} else if(square.target.type == BlockType.PILL_CHILD || square.target.type == BlockType.PILL_MASTER){
                            if(canMove({x:square.target.x, y:square.target.y + gridSize}) && canMove({x:square.target.partner.x, y:square.target.partner.y + gridSize})){
                                var child = getGridObject(square.target.partner.x, square.target.partner.y);
                                moveDown(square.target);
                                getGridObject(square.target.x, square.target.y).target = square.target;
                                getGridObject(child.target.x, child.target.y).target = child.target;
                                square.target = null;
                                child.target = null;
                            }
                        }
					}
				}
			}
         }

         check();

        if (renderCount % 15 == 0 && !gameOver) {

			if (!canMove({x:pill.x, y:pill.y + gridSize}) || !canMove({x:pill.partner.x, y:pill.partner.y + gridSize})) {
				//need new pill
				
				if(pill.y == -offset){
                    gameover();
				}else{
				
					if(pill != null){
						getGridObject(pill.x, pill.y).target = pill;
						getGridObject(pill.partner.x, pill.partner.y).target = pill.partner;

                        if(pill.pill_rotation == PillRotation.BOTTOM || pill.pill_rotation == PillRotation.TOP){
                            pill.type = BlockType.PILL_SINGLE;
                            pill.partner.type = BlockType.PILL_SINGLE;
                        }
					}
					
					check();
                    pill = nextPill;
					nextPill = createPill();

                    showNextPill();
                    usePill();
                    
				}
			}else{
				moveDown(pill);
			}

            //check pill
            
        }

        
    }
	


    function moveLeft() {
		if(canMove({x:pill.x - gridSize, y:pill.y}) && canMove({x:pill.partner.x - gridSize,y:pill.partner.y})){
			pill.x -= gridSize;
			pill.partner.x -= gridSize;
		}
    }

    function moveRight() {
		
		if(canMove({x:pill.x + gridSize, y:pill.y}) && canMove({x:pill.partner.x + gridSize, y:pill.partner.y})){
			pill.x += gridSize;
			pill.partner.x += gridSize;
		}
    }

    function moveDown(obj) {
	
		if(obj.type == BlockType.PILL_SINGLE){
			if(canMove({x:obj.x, y:obj.y + gridSize})){
				obj.y += gridSize;
			}
		}else{
			if(canMove({x:obj.x, y:obj.y + gridSize}) && canMove({x:obj.partner.x, y:obj.partner.y + gridSize})){
				obj.y += gridSize;
				obj.partner.y += gridSize;
			}
		}
		
    }

    function rotate() {
	
		switch(pill.pill_rotation){
			case PillRotation.RIGHT:
				if(canMove({x:pill.x , y:pill.y}) && canMove({x:pill.partner.x - gridSize, y:pill.partner.y -gridSize})){
					pill.partner.x -= gridSize;
					pill.partner.y -=gridSize;
					pill.pill_rotation = PillRotation.TOP;
				}
			break;
			
			case PillRotation.LEFT:
			
				if(canMove({x:pill.x , y:pill.y}) && canMove({x:pill.partner.x + gridSize, y:pill.partner.y + gridSize})){
					pill.partner.x += gridSize;
					pill.partner.y += gridSize;
					pill.pill_rotation = PillRotation.BOTTOM;
				}
			break;
			
			case PillRotation.TOP:
			
				if(canMove({x:pill.x, y:pill.y}) && canMove({x:pill.partner.x - gridSize, y:pill.partner.y + gridSize})){
					pill.partner.x -= gridSize;
					pill.partner.y += gridSize;
					pill.pill_rotation = PillRotation.LEFT;
				}
			break;
			
			case PillRotation.BOTTOM:
			
				if(canMove({x:pill.x, y:pill.y}) && canMove({x:pill.partner.x + gridSize, y:pill.partner.y - gridSize})){
					pill.partner.x +=gridSize;
					pill.partner.y -= gridSize;
					pill.pill_rotation = PillRotation.RIGHT;
				}
			break;
		}
	

    }
   
    function createEnemys() {
	
	virusCount = levelMultiplier * level;
	
		while(virusCount){
			var asset = assets[Math.floor(Math.random() * 4)];
			var item = new Sprite(context, "images/"+asset.image+".png");
			
			item.x = (gridSize * Math.floor(Math.random() * (gridData.width/25))) + offset;
			item.y = (gridSize * Math.floor(Math.random() * ((gridData.height/2)/25) + ((gridData.height/2)/25) )) + offset
			
			if(getGridObject(item.x,item.y).target != null)
				continue;
			
            item.alpha = 0.5;
			item.width = gridSize;
			item.height = gridSize;
			item.type = BlockType.VIRUS;
			item.assetID = asset.id;
			
			getGridObject(item.x,item.y).target = item;
			
			gridData.addChild(item);
			
			virusCount--;
		}

    return true;
	
    } 
	
	function canMove(obj){
		try{
			if(getGridObject(obj.x,obj.y).target != null)
				return false;
		}catch(e){ return false;}
		
		return true;
	}
	
	function getGridObject(x,y){

		try{
			return grid[Math.ceil(x/gridSize) - 1][Math.ceil(y/gridSize) - 1];
		}catch(e){ return null;}
	}


	function check(){
		var square;
		var lastMatch = -1;
		var found = [];
		
		for (var x = 0; x < 12; x++) {
            for (var y = 0; y < 21; y++) {
                 square = getGridObject((x+1)*25, (y+1)*25);

                    if(square == null){
                        square = {target: null}
                     }

					if(square.target != null && lastMatch == -1)
						lastMatch = square.target.assetID;
					
					if(square.target != null && lastMatch == square.target.assetID ){
						found.push({x:(x+1)*25, y:(y+1)*25});
					}else{
						if(found.length > 3 ){
							for(var r =0; r < found.length; r++){
								var ta = getGridObject(found[r].x, found[r].y).target;
                                var tweener = new Tween(ta, 'width', Tween.backEaseIn, ta.width,0.01, 0.5);
                                var tweener2 = new Tween(ta, 'height', Tween.backEaseIn, ta.height,0.01, 0.5);
                                tweener.removeItem = getGridObject(found[r].x, found[r].y).target;
                                tweener.onMotionFinished = function(){removeChild(this.removeItem)};
                                tweener.start();
                                tweener2.start();

                                if(getGridObject(found[r].x, found[r].y).target.type == BlockType.PILL_MASTER || getGridObject(found[r].x, found[r].y).target.type == BlockType.PILL_CHILD){
                                    getGridObject(found[r].x, found[r].y).target.partner.type = BlockType.PILL_SINGLE;   
                                }


                                getGridObject(found[r].x, found[r].y).target = null;
							}
						}
						
						found = [];
						
						if(square.target != null){
							lastMatch = square.target.assetID;
							found.push({x:(x+1)*25, y:(y+1)*25});
						}else{
							lastMatch = -1;
						}
						
					}
            }
        }
		
		lastMatch = -1;
		found = [];
		
		for (y = 0; y < 20; y++) {
            for (x = 0; x < 13; x++) {
                 square = getGridObject((x+1)*25, (y+1)*25);


                     if(square == null){
                        square = {target: null}
                     }
                 

					if(square.target != null && lastMatch == -1)
						lastMatch = square.target.assetID;
					
					if(square.target != null && lastMatch == square.target.assetID ){
						found.push({x:(x+1)*25, y:(y+1)*25});
					}else{
					
						if(found.length > 3 ){
							for( r =0; r < found.length; r++){
								ta = getGridObject(found[r].x, found[r].y).target;
                                tweener = new Tween(ta, 'width', Tween.backEaseIn, ta.width,0.01, 0.5);
                                tweener2 = new Tween(ta, 'height', Tween.backEaseIn, ta.height,0.01, 0.5);
                                tweener.removeItem = getGridObject(found[r].x, found[r].y).target;
                                tweener.onMotionFinished = function(){removeChild(this.removeItem)};
                                tweener.start();
                                tweener2.start();

                                if(getGridObject(found[r].x, found[r].y).target.type == BlockType.PILL_MASTER || getGridObject(found[r].x, found[r].y).target.type == BlockType.PILL_CHILD){
                                    getGridObject(found[r].x, found[r].y).target.partner.type = BlockType.PILL_SINGLE;   
                                }

								getGridObject(found[r].x, found[r].y).target = null;
							}
						}
						
						found = [];
						if(square.target != null){
							lastMatch = square.target.assetID;
							found.push({x:(x+1)*25, y:(y+1)*25});
						}else{
							lastMatch = -1;
						}
					}
            }
        }

        virusCheck();
	}

   function virusCheck(){

    var virusTotal = 0;

        for (y = 0; y < 20; y++) {
            for (x = 0; x < 12; x++) {
                var square = getGridObject((x+1)*25, (y+1)*25);
                if(square.target != null){
                    if(square.target.type == BlockType.VIRUS){
                       virusTotal++;
                    }
                }
                    
            }
        }

        if(virusTotal == 0){
            trace("won level, all viruses destroyed");
            gameOver = true;
            wonLevel = true;
        }

        virusTF.text = "Virus(s) left {#}";
        virusTF.text = virusTF.text.replace("{#}", virusTotal);

        if(virusTotal <= 0)
            levelComplete();

    }

    

</script>
</body>
</html>